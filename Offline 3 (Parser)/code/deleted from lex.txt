\' {
    curr = "";
    currExact = "";
    BEGIN CHAR_STATE;
}
<CHAR_STATE>\\n {
    curr += '\n';
    currExact += "\\n";
}
<CHAR_STATE>\\t {
    curr += '\t';
    currExact += "\\t";
}
<CHAR_STATE>\\\\ {
    curr += '\\';
    currExact += "\\\\";
}
<CHAR_STATE>\\\" {
    curr += '\"';
    currExact += "\\\"";
}
<CHAR_STATE>\\\' {
    curr += '\'';
    currExact += "\\\'";    
}
<CHAR_STATE>\\a {
    curr += '\a';
    currExact += "\\a";
}
<CHAR_STATE>\\f {
    curr += '\f';
    currExact += "\\f";
}
<CHAR_STATE>\\r {
    curr += '\r';
    currExact += "\\r";
}
<CHAR_STATE>\\b {
    curr += '\b';
    currExact += "\\b";
}
<CHAR_STATE>\\v {
    curr += '\v';
    currExact += "\\v";
}
<CHAR_STATE>\\0 {
    curr += '\0';
    currExact += "\\0";
}
<CHAR_STATE><<EOF>> {
    logOut << endl << "Error at line no " << lineNo << ": Unterminated character '" << currExact << endl;
    errorOut << endl << "Error at line no " << lineNo << ": Unterminated character '" << currExact << endl;
    errorNo++;
    BEGIN INITIAL;
}
<CHAR_STATE>{newline} {
    logOut << endl << "Error at line no " << lineNo << ": Unterminated character '" << currExact << endl;
    errorOut << endl << "Error at line no " << lineNo << ": Unterminated character '" << currExact << endl;
    errorNo++;
    lineNo++;
    BEGIN INITIAL;
}
<CHAR_STATE>\' {
    if ((curr.length() == 1) || (curr.length() == 0 && currExact == "\\0")) {
        logOut << endl << "Line no " << lineNo << ": Token <CONST_CHAR> Lexeme '" << currExact << "' found ";
        logOut << "--> <CHAR_CONST, " << curr << "> " << endl;
        st.insert("'"+currExact+"'", "CONST_CHAR", logOut);
        logOut << endl;
        // tokenOut << "<CHAR_CONST, " << curr << "> ";
    } else if(curr.length() == 0) {
        logOut << endl << "Error at line no " << lineNo << ": Empty character constant error '" << currExact << "'" << endl;
        errorOut << endl << "Error at line no " << lineNo << ": Empty character constant error '" << currExact << "'" << endl;
        errorNo++;
    } else {
        logOut << endl << "Error at line no " << lineNo << ": Multi character constant error '" << currExact << "'" << endl;
        errorOut << endl << "Error at line no " << lineNo << ": Multi character constant error '" << currExact << "'" << endl;
        errorNo++;
    }

    BEGIN INITIAL;
}
<CHAR_STATE>. {
    curr += yytext;
    currExact += yytext;
}
\" {
    curr = "";
    currExact = "";
    startLineNo = lineNo;
    BEGIN STR;
}
<STR>\\n {
    curr += '\n';
    currExact += "\\n";
}
<STR>\\t {
    curr += '\t';
    currExact += "\\t";
}
<STR>\\\\ {
    curr += '\\';
    currExact += "\\\\";
}
<STR>\\\" {
    curr += '\"';
    currExact += "\\\"";
}
<STR>\\\' {
    curr += '\'';
    currExact += "\\\'";
}
<STR>\\a {
    curr += '\a';
    currExact += "\\a";
}
<STR>\\f {
    curr += '\f';
    currExact += "\\f";
}
<STR>\\r {
    curr += '\r';
    currExact += "\\r";
}
<STR>\\b {
    curr += '\b';
    currExact += "\\b";
}
<STR>\\v {
    curr += '\v';
    currExact += "\\v";
}
<STR>\\0 {
    curr += '\0';
    currExact += "\\0";
}
<STR>\\\r\n {
    currExact += "\\\r\n";
    lineNo++;
}
<STR>\\\n {
    currExact += "\\\n";
    lineNo++;
}
<STR>{newline} {
    logOut << endl << "Error at line no " << startLineNo << ": Unterminated String \"" << currExact << endl;
    errorOut << endl << "Error at line no " << startLineNo << ": Unterminated String \"" << currExact << endl;
    errorNo++;
    lineNo++;
    BEGIN INITIAL;
}
<STR><<EOF>> {
    logOut << endl << "Error at line no " << startLineNo << ": Unterminated String \"" << currExact << "\"" << endl;
    errorOut << endl << "Error at line no " << startLineNo << ": Unterminated String \"" << currExact << "\"" << endl;
    errorNo++;
    BEGIN INITIAL;
}
<STR>\" {
    logOut << endl << "Line no " << startLineNo << ": Token <STRING> Lexeme \"" << currExact << "\" found ";
    logOut << "--> <STRING, \"" << curr << "\"> " << endl;
    // tokenOut << "<STRING, \"" << curr << "\"> ";
    BEGIN INITIAL;
}
<STR>. {
    curr += yytext;
    currExact += yytext;
}